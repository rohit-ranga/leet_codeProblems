1929. Concatenation of Array

class Solution {
    public int[] getConcatenation(int[] nums) {
        int[] ans = new int[2*nums.length];

        for(int i=0; i<nums.length; i++){
            ans[i] = nums[i];
        }

        for(int i=0; i< nums.length; i++){
            ans[i+nums.length] = nums[i];
        }

        return ans;
    }
}



1920. Build Array from Permutation

class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];

        for(int i=0; i<nums.length; i++){
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
}


1512. Number of Good Pairs

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count= 0;
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i] == nums[j]){
                    count++;                }
            }
        }
        return count;
    }
}


2011. Final Value of Variable After Performing Operations

class Solution {
    public int finalValueAfterOperations(String[] operations) {
       
        int count=0;
        for(int i=0; i<operations.length; i++){
            if(operations[i] .equals("++X") || operations[i] .equals("X++")){
                ++count;
            }
            else if(operations[i].equals("--X") || operations[i].equals("X--")){
                --count;  
            }
        }
        return count;
        
    }
}


1470. Shuffle the Array

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] ans = new int[2*n];

        for (int i=0; i<n; i++ ){
           
               ans[2*i]=nums[i];
               ans[2*i+1]=nums[n+i];
    
        }
        return ans;
        
    }
}


2942. Find Words Containing Character

class Solution {
    public List<Integer> findWordsContaining(String[] words, char x) {
       List<Integer> ans= new ArrayList<>();
        for(int i=0; i<words.length; i++){
            for(int j=0; j<words[i].length(); j++){
            if(words[i].charAt(j) == x){
                ans.add(i);
                break;
            }}
        }
        return ans;
        
    }
}



1672. Richest Customer Wealth

class Solution {
    public int maximumWealth(int[][] accounts) {
        
        int maxSum= 0;

        for(int i=0; i<accounts.length; i++){
            int sum = 0;
            for(int j=0; j<accounts[i].length; j++){
                sum += accounts[i][j];
            }
            maxSum = Math.max(maxSum, sum);
        }
        
        return maxSum;
    }
}



2798. Number of Employees Who Met the Target

class Solution {
    public int numberOfEmployeesWhoMetTarget(int[] hours, int target) {
        int count=0;

        for(int i=0; i<hours.length; i++){
            if(hours[i] >= target){
                count++;
            }
        }
        return count;
    }
}



1431. Kids With the Greatest Number of Candies

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        List<Boolean> ans = new ArrayList<>();

        int maxm = Integer.MIN_VALUE;;
        for(int i=0; i<candies.length; i++){
            if(candies[i] > maxm){
                maxm = candies[i];
            }
        }


        for(int i=0; i<candies.length; i++){
            int newCandies = candies[i] + extraCandies;
            if(newCandies >= maxm){
                ans.add(true);
            }
            else{
                ans.add(false);
            }
        }
            return ans;
    }
}



2824. Count Pairs Whose Sum is Less than Target

class Solution {
    public int countPairs(List<Integer> nums, int target) {
        int count = 0;

        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                if(nums.get(i) + nums.get(j) < target){
                    count++;
                }
            }
        }
        return count;
    }
}



1365. How Many Numbers Are Smaller Than the Current Number

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] ans = new int[nums.length] ;
        int count=0;

        for(int i=0; i<nums.length; i++){
           for(int j=0; j<nums.length; j++){
               if(nums[i] > nums[j]){
                   count++;
               }
           }
           ans[i] =count;
           count=0;
        }
        return ans;
    }
}


1480. Running Sum of 1d Array

class Solution {
    public int[] runningSum(int[] nums) {
        int[] ans = new int[nums.length];
        int sum = 0;
        for(int i=0; i<nums.length; i++){
            sum += nums[i];
            ans[i] = sum;
        }
        
        return ans;
    }
}


2114. Maximum Number of Words Found in Sentences

class Solution {
    public int mostWordsFound(String[] sentences) {
        int count = 0;
        int maxm = 0;

        for(int i=0; i<sentences.length; i++){
            for(int j=0; j<sentences[i].length(); j++){
                if(sentences[i].charAt(j) == ' '){
                    count++;
                }
            }
            maxm = Math.max(maxm,count);
            count = 0;
        }
        return maxm+1;
    }
}