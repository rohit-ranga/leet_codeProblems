1929. Concatenation of Array

class Solution {
    public int[] getConcatenation(int[] nums) {
        int[] ans = new int[2*nums.length];

        for(int i=0; i<nums.length; i++){
            ans[i] = nums[i];
        }

        for(int i=0; i< nums.length; i++){
            ans[i+nums.length] = nums[i];
        }

        return ans;
    }
}



1920. Build Array from Permutation

class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];

        for(int i=0; i<nums.length; i++){
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
}


1512. Number of Good Pairs

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count= 0;
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i] == nums[j]){
                    count++;                }
            }
        }
        return count;
    }
}


2011. Final Value of Variable After Performing Operations

class Solution {
    public int finalValueAfterOperations(String[] operations) {
       
        int count=0;
        for(int i=0; i<operations.length; i++){
            if(operations[i] .equals("++X") || operations[i] .equals("X++")){
                ++count;
            }
            else if(operations[i].equals("--X") || operations[i].equals("X--")){
                --count;  
            }
        }
        return count;
        
    }
}


1470. Shuffle the Array

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] ans = new int[2*n];

        for (int i=0; i<n; i++ ){
           
               ans[2*i]=nums[i];
               ans[2*i+1]=nums[n+i];
    
        }
        return ans;
        
    }
}


2942. Find Words Containing Character

class Solution {
    public List<Integer> findWordsContaining(String[] words, char x) {
       List<Integer> ans= new ArrayList<>();
        for(int i=0; i<words.length; i++){
            for(int j=0; j<words[i].length(); j++){
            if(words[i].charAt(j) == x){
                ans.add(i);
                break;
            }}
        }
        return ans;
        
    }
}



1672. Richest Customer Wealth

class Solution {
    public int maximumWealth(int[][] accounts) {
        
        int maxSum= 0;

        for(int i=0; i<accounts.length; i++){
            int sum = 0;
            for(int j=0; j<accounts[i].length; j++){
                sum += accounts[i][j];
            }
            maxSum = Math.max(maxSum, sum);
        }
        
        return maxSum;
    }
}



2798. Number of Employees Who Met the Target

class Solution {
    public int numberOfEmployeesWhoMetTarget(int[] hours, int target) {
        int count=0;

        for(int i=0; i<hours.length; i++){
            if(hours[i] >= target){
                count++;
            }
        }
        return count;
    }
}



1431. Kids With the Greatest Number of Candies

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        List<Boolean> ans = new ArrayList<>();

        int maxm = Integer.MIN_VALUE;;
        for(int i=0; i<candies.length; i++){
            if(candies[i] > maxm){
                maxm = candies[i];
            }
        }


        for(int i=0; i<candies.length; i++){
            int newCandies = candies[i] + extraCandies;
            if(newCandies >= maxm){
                ans.add(true);
            }
            else{
                ans.add(false);
            }
        }
            return ans;
    }
}



2824. Count Pairs Whose Sum is Less than Target

class Solution {
    public int countPairs(List<Integer> nums, int target) {
        int count = 0;

        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                if(nums.get(i) + nums.get(j) < target){
                    count++;
                }
            }
        }
        return count;
    }
}



1365. How Many Numbers Are Smaller Than the Current Number

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] ans = new int[nums.length] ;
        int count=0;

        for(int i=0; i<nums.length; i++){
           for(int j=0; j<nums.length; j++){
               if(nums[i] > nums[j]){
                   count++;
               }
           }
           ans[i] =count;
           count=0;
        }
        return ans;
    }
}


1480. Running Sum of 1d Array

class Solution {
    public int[] runningSum(int[] nums) {
        int[] ans = new int[nums.length];
        int sum = 0;
        for(int i=0; i<nums.length; i++){
            sum += nums[i];
            ans[i] = sum;
        }
        
        return ans;
    }
}


2114. Maximum Number of Words Found in Sentences

class Solution {
    public int mostWordsFound(String[] sentences) {
        int count = 0;
        int maxm = 0;

        for(int i=0; i<sentences.length; i++){
            for(int j=0; j<sentences[i].length(); j++){
                if(sentences[i].charAt(j) == ' '){
                    count++;
                }
            }
            maxm = Math.max(maxm,count);
            count = 0;
        }
        return maxm+1;
    }
}

2974. Minimum Number Game

class Solution {
    public int[] numberGame(int[] nums) {
  
        Arrays.sort(nums);
        for(int i=0; i<nums.length; i+=2){
            int temp = nums[i];
            nums[i] = nums[i+1];
            nums[i+1] = temp;
        }
        return nums;
    }

}



1662. Check If Two String Arrays are Equivalent

class Solution {
    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {
        String one="";
        String two="";

        for(int i=0; i<word1.length; i++){
            one += word1[i];
        }
        for(int i=0; i<word2.length; i++){
            two += word2[i];
        }

        return one.equals(two);
    }
}



1773. Count Items Matching a Rule

class Solution {
    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {
        int count=0;

        for(int i=0; i<items.size(); i++){

            if(ruleKey.equals("type")){
                if(items.get(i).get(0).equals(ruleValue)){
                    count++;
                }
            }
            if(ruleKey.equals("color")){
                if(items.get(i).get(1).equals(ruleValue)){
                    count++;
                }
            }
            if(ruleKey.equals("name")){
                if(items.get(i).get(2).equals(ruleValue)){
                    count++;
                }
            }
        }
        return count;
    }
}



1528. Shuffle String

class Solution {
    public String restoreString(String s, int[] indices) {
        char[] ans = new char[s.length()];

        for(int i=0; i<indices.length; i++){
            ans[indices[i]] = s.charAt(i);
        }
        return new String(ans);
    }
}



1816. Truncate Sentence

class Solution {
    public String truncateSentence(String s, int k) {
        int count=0;
        int i;

        for(i=0; i<s.length(); i++){
            if(s.charAt(i) == ' '){
                count++;
                if(count == k){
                    break;
                }
            }
        }
        return s.substring(0,i);
    }
}



2535. Difference Between Element Sum and Digit Sum of an Array


class Solution {

    public int digitSum(int n){
        int sum=0;
        while(n>0){
            sum += n%10;
            n = n/10;
        }
        return sum;
    }

    public int differenceOfSum(int[] nums) {
        int elementSum = 0;
        int digiSum = 0;

        for(int i=0; i<nums.length; i++){
            elementSum += nums[i];
            digiSum += digitSum(nums[i]);
        }
        return Math.abs(elementSum - digiSum);
    }
        
}



2367. Number of Arithmetic Triplets


class Solution {
    public int arithmeticTriplets(int[] nums, int diff) {
        int count =0;

        for(int i=0; i<nums.length; i++){
            for(int j=i+1 ; j<nums.length; j++){
                for(int k=j+1; k<nums.length; k++){
                    if(nums[j] - nums[i]==diff && nums[k] - nums[j] == diff){
                        count++;
                    }
                }
            }
        }
        return count;

    }
}




2006. Count Number of Pairs With Absolute Difference K


class Solution {
    public int countKDifference(int[] nums, int k) {
        int count=0;
        
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(Math.abs(nums[i] - nums[j]) == k){
                    count++;
                }
            }
        }
        return count;
    }
}




1913. Maximum Product Difference Between Two Pairs


class Solution {
    public int maxProductDifference(int[] nums) {
        int maxPro = Integer.MIN_VALUE;
        int minPro = Integer.MAX_VALUE;
        int prod ;

        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                prod = nums[i]*nums[j];
                maxPro = Math.max(maxPro,prod);
                minPro = Math.min(minPro,prod);
            }
        }
        return Math.abs(maxPro-minPro);
    }
}




2433. Find The Original Array of Prefix Xor


class Solution {
    public int[] findArray(int[] pref) {
        int[] ans = new int[pref.length];
        ans[0] = pref[0];
        
        for(int i=1; i<pref.length; i++){
            ans[i] = pref[i] ^ pref[i-1];
        }
        return ans;
    }
}
